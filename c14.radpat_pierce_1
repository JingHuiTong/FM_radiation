#!/bin/csh
# EJG/PL March 2010
# 
#===========================================================
#              c14.radpat_pierce_1
#===========================================================
# this script is just like c13.*, except it makes only
# one panel, for one phase of interest.
# and it makes it really big.  here, we do not assume the
# input exists, as it might be for some different phase
# we've not done yet. some wonderful and exotic phase.

# INPUT:  (1) station/event location info and distances from
# -----       master info file
#         (2) strike, dip, rake
#         (3) radiation pattern files made from
#             the script named c12.radiation_pat, named
#             P_radiation, SV_radiation, SH_radiation
#         (4) the phase of interest, and radiation pattern
#              (P, SV, or SH) to plot it on
#         (5) some directory location info

# OUTPUT:  (1) a postscript plot with 1 big beach balls
# -----        & piercing points for the phase of interest

echo " "
echo "-------------------------------------------------------------"
echo "                c14.radpat_pierce_1:     STARTING "
echo "-------------------------------------------------------------"

set EVENT     = 201812232308
set DIRSRC    = ./
set DIRDATA   = ./
set DIRPLOT   = ./
set strike    = 265
set dip       = 15
set rake      = -8
set WAVE      = SKKS   # phase of interest:
set RADIA     = SV   # radiation pattern to plot it on:

gfortran $DIRSRC/radiation.f90 -o RADI
./RADI << EOF
$strike $dip $rake
EOF

# # convert the output of radiation.f, i.e., ASCII
# # radiation pattern info, to GMT's grd file format, for plotting
foreach comp ( P SH SV )
   gmt xyz2grd ${comp}_radiation -G${comp}.grd -A -I1/1 -R0/360/0/90
   mv ${comp}_radiation $EVENT.${comp}_radiation
end

set NSTA   = 1 
set ELAT   = -20.2 
set ELON   = -174.94
set EZ     = 118.4 
set EMAG   = 6.4

# output plot file:
set OUTFILE = $DIRPLOT/$EVENT.c14.radpat_pierce_$WAVE.ps


set X    = $WAVE
set COMP = $RADIA


# output file exists or not 

#if ( ! -e c14_radiation."$X"_"$COMP" ) then
# deg 2 rad
set rad2deg = 57.2957795

# radius of source depth
set ER = ` echo $EZ | awk '{print 6371.0 - $1}' `

# we'll need Vp and Vs at the event depth, in order
# to compute take-off angle from ray parameter.
# we'll use a super decimated PREM model.
set REFMOD = $DIRSRC/PREM_Z,Vp,Vs
set VP = ` awk '$1>='$EZ'-0.05 && $1<='$EZ'+0.05 {print $2}' $REFMOD | awk 'NR==1' `
set VS = ` awk '$1>='$EZ'-0.05 && $1<='$EZ'+0.05 {print $3}' $REFMOD | awk 'NR==1' `

# we'll proceed as follows: grab the station & 
# and dist info from the INFIL, and run taup_time,
# which gives us ray parameter.  for phase
# of interest to be plotted on a rad pat, we will
# build a separate file of the output info
# Once done, we proceed to make the plot
# variables.  just make sure taup understands the names

# initiate temporary phase file:
echo $X >! phase.${X}_$COMP
echo $X $COMP >! c14_radiation."$X"_"$COMP"
# define P or S vel (first letter of phase)
set TYPE = `echo $X | cut -c1`
if($TYPE == P ) set VEL = $VP
if($TYPE == S ) set VEL = $VS

# compfile f90 code to give rad pat amp for
# station theta, az for phase list, to go into
# the rad_info file
#FCOMP = gfortran
gfortran $DIRSRC/radiation_th,az.f -o RADTHAZ



# echo "c14.radpat_pierce_1: computing ray parameters and take off angles "
# # loop: STATIONS
@ i = 1
while($i <= $NSTA)
	echo $i
   # grab info for the station
   # set ISTA = ( ` awk ' NR=='$i' {print $3,$5,$9,$10} ' INFIL ` )
   set DIST = 140.76
   set AZ   = 316.03338
   set SLAT = 43.96
   set SLON = 42.69 #
   # grab the phase name and ray parameter, put into tmp file:
   /Users/pattylin/utilties/TauP-2.5.1/bin/taup_time -mod prem -evt $ELAT $ELON -h $EZ -deg $DIST \
       -sta $SLAT $SLON  -ph $X | awk ' NR>5 {print $3,$5}'  >! taup.tmp


#    # make/add to phase files
   if(-e phase.tmp) \rm phase.tmp
#
#    # we will keep only the first occurrance (i.e., neglect
#    # multiple returns of same phase, like triplications or
#    # major arc phases). stick ray param in file
   grep $X taup.tmp | awk 'NR==1 {print $2}' >! phase.tmp
#
#    # make sure something is in the file
   @ CHECK = ` wc -l phase.tmp | awk '{ print$1}' `

   # if we have info, calc the take off angle, and
   # write all the necessary info to the phase file
   if ($CHECK == 1 ) then
        awk '{print $0}' phase.tmp >! RAYPAR
        # take off angle from our beloved snell's law
        gmt math RAYPAR -C0 $VEL MUL $ER DIV $rad2deg MUL ASIN = ANGLE
        # finally, we arrive at our angle:
        set THETA = ` awk '{print '$rad2deg'*$1}' ANGLE `
        echo $THETA $AZ >>!  phase.${X}_$COMP

            # run our RADTHAZ code.  first make input. then run.
            # then def our AMP variable.
            echo $strike $dip $rake >! in.RADTHAZ
            echo $COMP >> in.RADTHAZ
            echo $THETA $AZ >> in.RADTHAZ

            ./RADTHAZ < in.RADTHAZ >! out.RADTHAZ
            set AMP = ` cat out.RADTHAZ `
            # write same info in an output file for possible later use:
            echo $THETA $AZ $AMP | awk '{ printf "%5.1f %5.1f %7.3f\n", $1,$2,$3}' >>!  c14_radiation."$X"_"$COMP"
   else if ( $CHECK == 0 ) then
       echo "null" $AZ "null" >>! c14_radiation."$X"_"$COMP"
endif

   @ i++       # increment to next station
end           # ending the station loop
#
# \rm taup.tmp phase.tmp RAYPAR ANGLE
# \rm RADTHAZ in.RADTHAZ out.RADTHAZ
#else
#     # -- plot ALL
     cat c14_radiation."$X"_"$COMP" | awk '$1 != "null" && $3 != "null" {print $1,$2}' >! phase.${X}_$COMP
#     # -- only for TA --
#     echo "II" >! network.d
#     paste network.d c14_radiation."$X"_"$COMP"  | awk '$2 != "null" && $4 != "null" && $1 == "TA" {print $2,$3}' >! phase.${X}_$COMP
#     \rm network.d
#endif #endif c14_radiation."$X"_"$COMP"
#
# # ===========================================
# #                   plotting time!
# # ===========================================
#
# echo "c14.radpat_pierce_1: MAKING THE PLOT FILE "
#
# # make a color palette table for underlying rad pat
gmt makecpt -Cpolar -T-1/1/0.02 -I -Z >! RAD.cpt
#gmtset COLOR_NAN 0/0/0
#
# # set some global parameters
# # size of beach balls
set SIZE = 6.0i
# # x origin
set X0 = 1.2i
# # y origin
set Y0 = 2.5i
#
# # convert the output of radiation.f, i.e., ASCII
# # radiation pattern info, to GMT's grd file format, for plotting
gmt xyz2grd $EVENT.${COMP}_radiation -G${COMP}.grd -A -I1/1 -R0/360/0/90
#
# # text labels
# # break apart event name for Big Title:
set YYYY = ` echo $EVENT | cut -c1-4 `
set MM   = ` echo $EVENT | cut -c5-6 `
set DD   = ` echo $EVENT | cut -c7-8 `
set HH   = ` echo $EVENT | cut -c9-10 `
set MIN  = ` echo $EVENT | cut -c11-12 `

# define our projection and starting position
gmt psbasemap  -R0/360/0/90 -JPa$SIZE -B0 -X$X0 -Y$Y0 -P -K >! $OUTFILE

# background radiation pattern:
gmt grdimage $COMP.grd -R -JP -CRAD.cpt -P -K -O  >> $OUTFILE
# black contour line at radiation amp = zero
echo "0.0 C" >! CONT
gmt grdcontour $COMP.grd -R -JP -CCONT -W2/150 -P -K -O >> $OUTFILE
# red contour line at radiation amp = -0.1
set DASH = t8_20:0
echo "-0.1 C" >! CONT
gmt grdcontour $COMP.grd -R -JP -CCONT -W0.5/220/0/0$DASH -P -K -O >> $OUTFILE
# blue contour line at radiation amp = +0.1
echo "0.1 C" >! CONT
gmt grdcontour $COMP.grd -R -JP -CCONT -W0.5/0/0/200$DASH -P -K -O >> $OUTFILE
# count the stations for each phase type:
set NP = ` wc phase.${X}_$COMP | awk '{print $1}' `
echo "0 90 18 0 5 CB $X $COMP n=$NP " >! text.tmp
# title text of each beach ball:
gmt pstext text.tmp -R -JP -N -Y0.2i -P -K -O >> $OUTFILE
# tick marks on balls:
gmt psbasemap  -R -JP -Bf15wsne -Y-0.2i -P -K -O  >> $OUTFILE
awk ' NR>1 {print $2,$1}' phase.${X}_$COMP >! theta,az.tmp
# add piercing points:
gmt psxy theta,az.tmp -R -JP -Sx0.25i -W1 -P -K -O >> $OUTFILE

# text at the top of page
gmt pstext  -R0/5/0/5 -JX5i -N -O -P -X2.4i -Y3.0i -K << EOF  >> $OUTFILE
0.5 5    20 0 0 CB ${MM}/${DD}/$YYYY ${HH}:${MIN} $X and $COMP Radiation Pattern
0.5 4.75 16 0 4 CB Lat: $ELAT Lon: $ELON Dep:$EZ km Mag: $EMAG
0.5 4.5  16 0 4 CB Focal Mech: Strike=$strike Dip=$dip Rake=$rake
0.5 4.25 16 0 6 CB (dashed lines: +/- 10% of maximum)
EOF

# more text: script name and time stamp
echo "0.5 4.00 16 0 6 CB SCRIPT: c14.radpat_pierce_1" >! datetag1
date "+CREATION DATE: %m/%d/%y  %H:%M:%S" >! datetag2
paste datetag1 datetag2 >! datetag3
gmt pstext datetag3 -JX -R -N -G0 -O >> $OUTFILE



# clean up
\rm .gmt* text.tmp theta,az.tmp INFIL datetag?
\rm phase.* CONT $COMP.grd RAD.cpt
# # return to our pwd
# cd $DIRPWD
#
# echo "---------------------------------------------------------------------------------"
# echo "                c14.radpat_pierce_1:   just finished making PLOT FILE : $OUTFILE "
# echo "---------------------------------------------------------------------------------"
# echo " "
#
#EOF
